/*******************************************  readString  *******************************************/

Dump of assembler code for function readString:
   0x00000000004007d5 <+0>:     push   %rbp
   0x00000000004007d6 <+1>:     mov    %rsp,%rbp
   0x00000000004007d9 <+4>:     push   %rbx
   0x00000000004007da <+5>:     sub    $0x48,%rsp
   0x00000000004007de <+9>:     mov    %rdi,-0x38(%rbp)
   0x00000000004007e2 <+13>:    mov    %esi,-0x3c(%rbp)
   0x00000000004007e5 <+16>:    mov    %rdx,-0x48(%rbp)
   0x00000000004007e9 <+20>:    mov    %rsp,%rax
   0x00000000004007ec <+23>:    mov    %rax,%rbx
   0x00000000004007ef <+26>:    mov    -0x3c(%rbp),%eax
   0x00000000004007f2 <+29>:    add    $0x24,%eax
   0x00000000004007f5 <+32>:    movslq %eax,%rdx
   0x00000000004007f8 <+35>:    sub    $0x1,%rdx
   0x00000000004007fc <+39>:    mov    %rdx,-0x28(%rbp)
   0x0000000000400800 <+43>:    cltq
   0x0000000000400802 <+45>:    add    $0xf,%rax
   0x0000000000400806 <+49>:    add    $0xf,%rax
   0x000000000040080a <+53>:    shr    $0x4,%rax
   0x000000000040080e <+57>:    shl    $0x4,%rax
   0x0000000000400812 <+61>:    sub    %rax,%rsp
   0x0000000000400815 <+64>:    mov    %rsp,%rax
   0x0000000000400818 <+67>:    add    $0xf,%rax
   0x000000000040081c <+71>:    shr    $0x4,%rax
   0x0000000000400820 <+75>:    shl    $0x4,%rax
   0x0000000000400824 <+79>:    mov    %rax,-0x20(%rbp)
   0x0000000000400828 <+83>:    movl   $0x0,-0x18(%rbp)
   0x000000000040082f <+90>:    lea    -0x48(%rbp),%rax
   0x0000000000400833 <+94>:    mov    %rax,%rdi
   0x0000000000400836 <+97>:    callq  0x4007ca <dummy>
   0x000000000040083b <+102>:   mov    0x20067e(%rip),%rax        # 0x600ec0 <stdin@@GLIBC_2.2.5>
   0x0000000000400842 <+109>:   mov    %rax,%rdi
   0x0000000000400845 <+112>:   callq  0x400660 <fgetc@plt>
   0x000000000040084a <+117>:   mov    %eax,-0x14(%rbp)
   0x000000000040084d <+120>:   cmpl   $0xffffffffffffffff,-0x14(%rbp)
   0x0000000000400851 <+124>:   je     0x400870 <readString+155>
   0x0000000000400853 <+126>:   cmpl   $0xa,-0x14(%rbp)
   0x0000000000400857 <+130>:   je     0x400870 <readString+155>
   0x0000000000400859 <+132>:   mov    -0x18(%rbp),%eax
   0x000000000040085c <+135>:   mov    -0x14(%rbp),%edx
   0x000000000040085f <+138>:   mov    %edx,%ecx
   0x0000000000400861 <+140>:   mov    -0x20(%rbp),%rdx
   0x0000000000400865 <+144>:   cltq
   0x0000000000400867 <+146>:   mov    %cl,(%rdx,%rax,1)
   0x000000000040086a <+149>:   addl   $0x1,-0x18(%rbp)
   0x000000000040086e <+153>:   jmp    0x40083b <readString+102>
   0x0000000000400870 <+155>:   mov    -0x18(%rbp),%eax
   0x0000000000400873 <+158>:   mov    -0x20(%rbp),%rdx
   0x0000000000400877 <+162>:   cltq
   0x0000000000400879 <+164>:   movb   $0x0,(%rdx,%rax,1)
   0x000000000040087d <+168>:   movl   $0x0,-0x18(%rbp)
   0x0000000000400884 <+175>:   jmp    0x4008a3 <readString+206>
   0x0000000000400886 <+177>:   mov    -0x18(%rbp),%eax
   0x0000000000400889 <+180>:   cltq
   0x000000000040088b <+182>:   add    -0x38(%rbp),%rax
   0x000000000040088f <+186>:   mov    -0x18(%rbp),%edx
   0x0000000000400892 <+189>:   mov    -0x20(%rbp),%rcx
   0x0000000000400896 <+193>:   movslq %edx,%rdx
   0x0000000000400899 <+196>:   movzbl (%rcx,%rdx,1),%edx
   0x000000000040089d <+200>:   mov    %dl,(%rax)
   0x000000000040089f <+202>:   addl   $0x1,-0x18(%rbp)
   0x00000000004008a3 <+206>:   cmpl   $0x23,-0x18(%rbp)
   0x00000000004008a7 <+210>:   jle    0x400886 <readString+177>
   0x00000000004008a9 <+212>:   mov    -0x48(%rbp),%rdx
   0x00000000004008ad <+216>:   mov    -0x38(%rbp),%rax
   0x00000000004008b1 <+220>:   mov    %rax,%rdi
   0x00000000004008b4 <+223>:   mov    $0x0,%eax
   0x00000000004008b9 <+228>:   callq  *%rdx
   0x00000000004008bb <+230>:   mov    %rbx,%rsp
   0x00000000004008be <+233>:   mov    -0x8(%rbp),%rbx
   0x00000000004008c2 <+237>:   leaveq
   0x00000000004008c3 <+238>:   retq

/*******************************************  main  *******************************************/
Dump of assembler code for function main:
   0x00000000004008c4 <+0>:     push   %rbp
   0x00000000004008c5 <+1>:     mov    %rsp,%rbp
   0x00000000004008c8 <+4>:     sub    $0x20,%rsp
   0x00000000004008cc <+8>:     mov    %edi,-0x14(%rbp)
   0x00000000004008cf <+11>:    mov    %rsi,-0x20(%rbp)
   0x00000000004008d3 <+15>:    movl   $0x0,-0x4(%rbp)
   0x00000000004008da <+22>:    callq  0x400640 <getpid@plt>
   0x00000000004008df <+27>:    mov    %eax,%edi
   0x00000000004008e1 <+29>:    callq  0x400680 <srand@plt>
   0x00000000004008e6 <+34>:    cmpl   $0x1,-0x14(%rbp)
   0x00000000004008ea <+38>:    jle    0x400915 <main+81>
   0x00000000004008ec <+40>:    mov    -0x20(%rbp),%rax
   0x00000000004008f0 <+44>:    add    $0x8,%rax
   0x00000000004008f4 <+48>:    mov    (%rax),%rax
   0x00000000004008f7 <+51>:    movzbl (%rax),%eax
   0x00000000004008fa <+54>:    cmp    $0x72,%al
   0x00000000004008fc <+56>:    jne    0x400915 <main+81>
   0x00000000004008fe <+58>:    callq  0x400690 <rand@plt>
   0x0000000000400903 <+63>:    mov    %eax,%edx
   0x0000000000400905 <+65>:    sar    $0x1f,%edx
   0x0000000000400908 <+68>:    shr    $0x1b,%edx
   0x000000000040090b <+71>:    add    %edx,%eax
   0x000000000040090d <+73>:    and    $0x1f,%eax
   0x0000000000400910 <+76>:    sub    %edx,%eax
   0x0000000000400912 <+78>:    mov    %eax,-0x4(%rbp)
   0x0000000000400915 <+81>:    mov    $0x600ee0,%eax
   0x000000000040091a <+86>:    mov    %eax,%eax
   0x000000000040091c <+88>:    and    $0xfffff000,%eax
   0x0000000000400921 <+93>:    mov    $0x7,%edx
   0x0000000000400926 <+98>:    mov    $0x1,%esi
   0x000000000040092b <+103>:   mov    %rax,%rdi
   0x000000000040092e <+106>:   callq  0x4005f0 <mprotect@plt>
   0x0000000000400933 <+111>:   mov    $0x400ac5,%edi
   0x0000000000400938 <+116>:   callq  0x400610 <puts@plt>
   0x000000000040093d <+121>:   mov    $0x400784,%edx
   0x0000000000400942 <+126>:   mov    -0x4(%rbp),%eax
   0x0000000000400945 <+129>:   mov    %eax,%esi
   0x0000000000400947 <+131>:   mov    $0x600ee0,%edi
   0x000000000040094c <+136>:   callq  0x4007d5 <readString>
   0x0000000000400951 <+141>:   mov    $0x400ad8,%esi
   0x0000000000400956 <+146>:   mov    $0x600ee0,%edi
   0x000000000040095b <+151>:   callq  0x400670 <strcmp@plt>
   0x0000000000400960 <+156>:   test   %eax,%eax
   0x0000000000400962 <+158>:   jne    0x40096b <main+167>
   0x0000000000400964 <+160>:   movb   $0x43,0x200549(%rip)        # 0x600eb4 <g  rade>
   0x000000000040096b <+167>:   mov    $0x400ae5,%eax
   0x0000000000400970 <+172>:   mov    $0x600ee0,%esi
   0x0000000000400975 <+177>:   mov    %rax,%rdi
   0x0000000000400978 <+180>:   mov    $0x0,%eax
   0x000000000040097d <+185>:   callq  0x400600 <printf@plt>
   0x0000000000400982 <+190>:   movzbl 0x20052b(%rip),%eax        # 0x600eb4 <grade>
   0x0000000000400989 <+197>:   movsbl %al,%edx
   0x000000000040098c <+200>:   mov    $0x400af8,%eax
   0x0000000000400991 <+205>:   mov    %edx,%esi
   0x0000000000400993 <+207>:   mov    %rax,%rdi
   0x0000000000400996 <+210>:   mov    $0x0,%eax
   0x000000000040099b <+215>:   callq  0x400600 <printf@plt>
   0x00000000004009a0 <+220>:   mov    $0x0,%edi
   0x00000000004009a5 <+225>:   callq  0x400620 <exit@plt>
   
/************************************  data section layout  *******************************/

/************************************  stack frame layout  *******************************/
